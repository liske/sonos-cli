#!/usr/bin/perl

# sonos-cli - Command line interface to control 'Sonos ZonePlayer' 
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2010 - 2012 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use warnings;
use strict;
use Net::UPnP::ControlPoint;
use Getopt::Long;

use constant {
    STATUS_OK => 200,

    SRV_DeviceProperties => 'urn:schemas-upnp-org:service:DeviceProperties:1',
    SRV_AVTransport => 'urn:schemas-upnp-org:service:AVTransport:1',
};

my $O_TIMEOUT = 3;
my $O_MODE = 'status';

GetOptions(
    'mode=s' => \$O_MODE,
    'timeout=i' => \$O_TIMEOUT,
);

my %commands = (
    Play => {
	title => 'play media',
	aargs => { Speed => 1 },
    },
    Pause => {
	title => 'pause media',
    },
    Stop => {
	title => 'stop media',
    },
    Next => {
	title => 'jump to next',
    },
    Previous => {
	title => 'jump to previous',
    },
    Snooze => {
	title => 'snooze active alarm',
	action => 'SnoozeAlarm',
	aargs => { Duration => 7*60 },
    }
);

my $cp = Net::UPnP::ControlPoint->new();
my @devs = $cp->search(st =>'urn:schemas-upnp-org:device:ZonePlayer:1', mx => $O_TIMEOUT);

my $devNum= 0;
my %devices;
my $cmd = ucfirst(lc($O_MODE));
my %zones;
foreach my $dev (@devs) {
    $devNum++;

    my %services;
    $services{(SRV_DeviceProperties)} = $dev->getservicebyname(SRV_DeviceProperties);
    $services{(SRV_AVTransport)} = $dev->getservicebyname(SRV_AVTransport);


    # GetZoneInfo (get MACAddress to build UDN)
    # HACK: $dev->getudn() is broken, try to build the UDN
    #       from the MACAddress - this might fail :-(
    my $aresp = $services{(SRV_DeviceProperties)}->postaction('GetZoneInfo');
    if($aresp->getstatuscode != STATUS_OK) {
	print STDERR "Got error code ".$aresp->getstatuscode."!\n";
	next;
    }
    my $ZoneInfo = $aresp->getargumentlist;
    my $UDN = $ZoneInfo->{MACAddress};
    $UDN =~ s/://g;
    $UDN = "RINCON_${UDN}01400";

    $devices{$UDN}->{dev} = $dev;
    $devices{$UDN}->{services} = \%services;
    $devices{$UDN}->{ZoneInfo} = $ZoneInfo;


    # GetZoneAttributes (get zone name)
    $aresp = $services{(SRV_DeviceProperties)}->postaction('GetZoneAttributes');
    if($aresp->getstatuscode != STATUS_OK) {
	print STDERR "Got error code ".$aresp->getstatuscode."!\n";
	next;
    }
    $devices{$UDN}->{ZoneAttributes} = $aresp->getargumentlist;


    my %aargs = (
	'InstanceID' => 0,
    );


    $aresp = $services{(SRV_AVTransport)}->postaction('GetPositionInfo', \%aargs);
    if($aresp->getstatuscode != STATUS_OK) {
	print STDERR "Got error code ".$aresp->getstatuscode."!\n";
	next;
    }
    $devices{$UDN}->{PositionInfo} = $aresp->getargumentlist;


    $aresp = $services{(SRV_AVTransport)}->postaction('GetTransportInfo', \%aargs);
    if($aresp->getstatuscode != STATUS_OK) {
	print STDERR "Got error code ".$aresp->getstatuscode."!\n";
	next;
    }
    $devices{$UDN}->{TransportInfo} = $aresp->getargumentlist;

    if($devices{$UDN}->{PositionInfo}->{TrackURI} =~ /^x-rincon:(RINCON_[\dA-F]+)/) {
	push(@{$zones{$1}->{zp}}, $UDN);
    }
    else {
	push(@{$zones{$UDN}->{zp}}, $UDN);
    }
}


foreach my $zone (keys %zones) {
    print "[", join(', ', map { $devices{$_}->{ZoneAttributes}->{CurrentZoneName} } @{$zones{$zone}->{zp}}), "]\n\t";
    print $devices{$zone}->{TransportInfo}->{CurrentTransportState}, " ";
    print $devices{$zone}->{PositionInfo}->{TrackURI}, "\n\n";
}


if(exists($commands{$cmd})) {
    my %aargs = (
	'InstanceID' => 0,
	(exists($commands{$cmd}->{aargs}) ? %{$commands{$cmd}->{aargs}} : ()),
    );

    foreach my $UDN (keys %devices) {
    # run user command
	my $aresp = $devices{$UDN}->{services}->{(SRV_AVTransport)}->postaction((exists($commands{$cmd}->{action}) ? $commands{$cmd}->{action} : $cmd), \%aargs);
	if($aresp->getstatuscode != STATUS_OK) {
	    print STDERR "[$devices{$UDN}->{ZoneAttributes}->{CurrentZoneName}] Got error code ".$aresp->getstatuscode."!\n";
	    next;
	}
    }
}
