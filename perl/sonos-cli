#!/usr/bin/perl

# sonos-cli - Command line interface to control 'Sonos ZonePlayer' 
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2010 - 2012 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use warnings;
use strict;
use Net::UPnP::SONOS;
use Getopt::Long;

my $O_TIMEOUT = 3;
my $O_MODE = 'status';

GetOptions(
    'mode=s' => \$O_MODE,
    'timeout=i' => \$O_TIMEOUT,
);

my %commands = (
    Play => {
	title => 'play media',
	service => SONOS_SRV_AVTransport,
	aargs => { Speed => 1 },
    },
    Pause => {
	title => 'pause media',
	service => SONOS_SRV_AVTransport,
    },
    Stop => {
	title => 'stop media',
	service => SONOS_SRV_AVTransport,
    },
    Toggle => {
	title => 'pause/play media toggle'
    },
    Next => {
	title => 'jump to next',
	service => SONOS_SRV_AVTransport,
    },
    Previous => {
	title => 'jump to previous',
	service => SONOS_SRV_AVTransport,
    },
    Snooze => {
	title => 'snooze active alarm',
	service => SONOS_SRV_AVTransport,
	action => 'SnoozeAlarm',
	aargs => { Duration => 7*60 },
    },

    Getled => {
	title => 'get current LED status',
	service => SONOS_SRV_DeviceProperties,
	action => 'GetLEDState',
    },

    Setledon => {
	title => 'set LED status to on',
	service => SONOS_SRV_DeviceProperties,
	action => 'SetLEDState',
	aargs => { DesiredLEDState => 'On' },
    },

    Setledoff => {
	title => 'set LED status to off',
	service => SONOS_SRV_DeviceProperties,
	action => 'SetLEDState',
	aargs => { DesiredLEDState => 'Off' },
    },

    Gettimeserver => {
	title => 'get configured NTP servers',
	service => SONOS_SRV_AlarmClock,
	action => 'GetTimeServer',
    },
);

my $sonos = Net::UPnP::SONOS->new();
my $cmd = ucfirst(lc($O_MODE));

my %zones = $sonos->getZones();
my %groups = $sonos->getGroups();
unless(exists($commands{$cmd})) {
    foreach my $group (keys %groups) {
	print "[", join(', ', map { $zones{$_}->{ZoneAttributes}->{CurrentZoneName} } @{$groups{$group}}), "]\n\t";
	print $zones{$group}->{TransportInfo}->{CurrentTransportState}, " ";
	print $zones{$group}->{PositionInfo}->{TrackURI}, "\n\n";
    }
}
else {
    if ($cmd eq 'Toggle') {
        # if any zone is paused, send play to them all; sometimes sending Pause
        # successfully pauses playback but leaves the state as PLAYING. Dunno why.
        my $paused = undef;
        foreach my $UDN (keys %zones) {
            my $state  = $zones{$UDN}->{TransportInfo}->{CurrentTransportState};
            $paused = $paused || ($state =~ /PAUSED/);
        }
        $cmd = $paused ? "Play" : "Pause";
    }

    my %aargs = (
	'InstanceID' => 0,
	(exists($commands{$cmd}->{aargs}) ? %{$commands{$cmd}->{aargs}} : ()),
    );

    foreach my $UDN (keys %zones) {
    # run user command
	my $aresp = $zones{$UDN}->{services}->{ $commands{$cmd}->{service} }->postaction((exists($commands{$cmd}->{action}) ? $commands{$cmd}->{action} : $cmd), \%aargs);
	if($aresp->getstatuscode != SONOS_STATUS_OK) {
	    print STDERR "[$zones{$UDN}->{ZoneAttributes}->{CurrentZoneName}] Got error code ".$aresp->getstatuscode."!\n";
	    next;
	}
	else {
	    print "[$zones{$UDN}->{ZoneAttributes}->{CurrentZoneName}]\n";
	    my $rargs = $aresp->getargumentlist();
	    foreach my $k (keys %$rargs) {
		print "\t$k = $rargs->{$k}\n";
	    }
	    print "\n";
       }
    }
}
