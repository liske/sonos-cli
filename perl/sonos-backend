#!/usr/bin/perl

# sonos-cli - Command line interface to control 'Sonos ZonePlayer' 
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2010 - 2014 (C) Thomas Liske [http://fiasko-nw.net/~thomas/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use AnyEvent;
use AnyEvent::HTTPD;
use AnyEvent::Socket qw(tcp_server);
use Getopt::Std;
use HTTP::Status qw(:constants);
use JSON::Any;
use MIME::Base64;
use Log::Any::Adapter;
use Log::Dispatch;
use Log::Dispatch::Screen;
use Log::Dispatch::Syslog;
use Net::UPnP::SONOS;
use Net::UPnP::SONOS::Properties qw(:keys);
use Net::UPnP::SONOS::Config;
use Proc::Daemon;
use Proc::PID::File;
use POSIX qw(mkfifo F_SETFL O_NONBLOCK EAGAIN);
use strict;
use warnings;

BEGIN {
    $INC{'Mo/builder.pm'} = 1;
    $INC{'Mo/default.pm'} = 1;

    sonos_config_register(qq(sonos-backend/CtrlListenAddr), qr/./, qq(Control socket bind address.), 0, '0.0.0.0');
    sonos_config_register(qq(sonos-backend/CtrlListenPort), qr/^\d+$/, qq(Control socket bind tcp port.), 0, 1400);
}

$0 = 'sonos-backend';

our $opt_d;
our $opt_f;
our $opt_r = '/var/run';
our $opt_c;
our $opt_t;
getopts('r:dfc:t');

my $mypid = $$;
my @pipe_pids;

my $logfmt = sub { my %p = @_; chomp($p{'message'}); return ("[$p{level}] $p{message}\n"); };
$main::logger = Log::Dispatch->new(callbacks => $logfmt);
$main::logger->add(
    Log::Dispatch::Screen->new(
	name => 'console',
	min_level => ($opt_f ? ($opt_d ? 'info' : 'notice') : 'warning'),
    )
);
$main::logger->add(
    Log::Dispatch::Syslog->new(
	name => 'syslog',
	min_level => ($opt_d ? 'info' : 'notice'),
	ident => 'sonos-backend',
	logopt => 'pid',
	facility => 'daemon',
    )
) unless($opt_f);
Log::Any::Adapter->set('Dispatch', dispatcher => $main::logger);

sub WARN_handler {
    my($signal) = @_;

	if(defined $main::logger) {
		$main::logger->warning("WARNING: $signal");
	}
	else {
		printf STDERR "WARNING: $signal\n";
	}
}

sub DIE_handler {
    my($signal) = @_;

	if(defined $main::logger) {
		$main::logger->critical("ERROR: $signal");
	}
	else {
		printf STDERR "ERROR: $signal\n";
	}

	exit 1;
}

sub INT_handler {
    if(defined($mypid) && ($mypid == $$)) {
	if(defined $main::logger) {
	    $main::logger->notice('Got SIGINT, terminating.');
	}
	else {
	    printf STDERR "Got SIGINT, terminating.\n";
	}
    }

    exit;
}

$SIG{__WARN__} = 'WARN_handler';
$SIG{__DIE__}  = 'DIE_handler';
$SIG{INT} = 'INT_handler';
$SIG{PIPE} = 'IGNORE';
$SIG{CHLD} = 'IGNORE';

END {
	if(defined($mypid) && ($mypid == $$)) {
		my $m = "terminated (rc=$?)";
		if(defined $main::logger) {
			$main::logger->notice($m);
		}
		else {
			print STDERR "$m\n";
		}
	}
}

if($opt_t) {
    Net::UPnP::SONOS::Config::sonos_config_template();
    exit 1;
}

Net::UPnP::SONOS::Config::sonos_config_load($opt_c);

unless($opt_f) {
    # daemonize
    eval { Proc::Daemon::Init() };
    die "Unable to fork daemon: $@\n" if($@);

    # check if we are alone
    eval {
	die "Daemon is already running or PID file is stale!\n" if(Proc::PID::File->running(verify => 1, dir => $opt_r));
    };
    die "Failed to setup PID file: $@\n" if($@);

    # detach log to console
    $main::logger->remove('console');
}


my $json = JSON::Any->new();
my $sonos = Net::UPnP::SONOS->new();
my %groups;
my %zones;
$sonos->search_async(iv => 3600, cb => sub {
    %groups = $sonos->getGroups();
    %zones = $sonos->getZones();

    $main::logger->notice("topology update, found ".(scalar keys %zones)." zones in ".(scalar keys %groups)." groups");
});

sub retval {
    return $json->encode(
	{
	    status_code => shift,
	    status_msg => shift,
	    retval => shift,
	});
}

sub find_groups($) {
    my $sel = shift || '*';
    my %groups = $sonos->getGroups();
    my %zones = $sonos->getZones();
    my @search = ($sel eq '*' ? keys %groups : split(/,/, $sel));

    my %g;
    foreach my $zpid (@search) {
	$g{$sonos->getGroup($zpid)}++;
    }

    return map { $zones{$_} } keys %g;
}

sub each_group($$) {
    my $sel = shift;
    my $cb = shift;

    foreach my $dev (find_groups($sel)) {
	&$cb($dev);
    }
}

sub find_zones($) {
    my $sel = shift;

    return $sonos->getZones();
}

sub each_zone($$) {
    my $sel = shift || '*';
    my $cb = shift;

    my %zones = find_zones($sel);
    foreach my $dev (values %zones) {
	&$cb($dev);
    }
}

my %ctrl_ctxs;
my %ctrl_cmds;
my %selectors;
my %posinfo;
%ctrl_cmds = (
    select => {
	handler => sub {
	    my $fh = shift;
	    
	    $selectors{$fh} = shift;

	    print $fh retval(HTTP_OK, 'OK');
	},
	args => [ qr/^(\*|[0-9a-f]{12}(,[0-9a-f]{12})*)$/i ],
	class => qq(global),
	descr => qq(Select (group of) zones to apply commands.),
    },


    LED => {
	handler => sub {
	    my $fh = shift;
	    my $v = shift;

	    my $led = ($v =~ /0|off/ ? 0 : 1);

	    each_zone($selectors{$fh}, sub {
		shift->dpLED($led);
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	args => [ qr/^(0|1|on|off|toggle)$/i ],
	class => qq(zone),
	descr => qq(Enable, disable or toggles zone's white status LED.),
    },

    mute => {
	handler => sub {
	    my $fh = shift;

	    print $fh = "ERROR| n/a, yet\n";
	},
	args => [ qr/^(0|1|on|off|toggle)$/i ],
	class => qq(zone),
	descr => qq(Mute or unmute a zone.),
    },

    status => {
	handler => sub {
	    my $fh = shift;

	    print $fh = "ERROR| n/a, yet\n";
	},
	descr => qq(Get zone status.),
    },

    members => {
	handler => sub {
	    my $fh = shift;

	    my %members;
	    each_group($selectors{$fh}, sub {
		my $group_zpid = shift->getShortID();
		$members{ ${ $groups{$group_zpid} }[0]->getProperty(SONOS_ZoneGroupName) } = [map { $_->getShortID() } @{ $groups{$group_zpid} }];
	    });

	    print $fh retval(HTTP_OK, 'OK', \%members);
	},
	descr => qq(Get group members.),
    },


    ## AVT ##
    play => {
	handler => sub {
	    my $fh = shift;

	    each_group($selectors{$fh}, sub {
		shift->avtPlay();
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	class => qq(group),
	descr => qq(Plays a group.),
    },

    pause => {
	handler => sub {
	    my $fh = shift;

	    each_group($selectors{$fh}, sub {
		shift->avtPause();
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	class => qq(group),
	descr => qq(Pauses a group.),
    },

    stop => {
	handler => sub {
	    my $fh = shift;

	    each_group($selectors{$fh}, sub {
		shift->avtStop();
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	class => qq(group),
	descr => qq(Stops a group.),
    },

    next => {
	handler => sub {
	    my $fh = shift;

	    each_group($selectors{$fh}, sub {
		shift->avtNext();
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	class => qq(group),
	descr => qq(Switch to the next track in a group.),
    },

    previous => {
	handler => sub {
	    my $fh = shift;

	    each_group($selectors{$fh}, sub {
		shift->avtPrevious();
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	class => qq(group),
	descr => qq(Switch to the previous track in a group.),
    },

    join => {
	handler => sub {
	    my $fh = shift;
	    my $mid = shift;

	    if($mid eq '*') {
		my @groups = find_groups($selectors{$fh});
		$mid = (shift @groups)->getShortID;
	    }

	    each_zone($selectors{$fh}, sub {
		my $dev = shift;
		$dev->avtJoin($mid)
		    if($dev->getShortID ne $mid)
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	args => [ qr/^(\*|[0-9a-f]{12})$/i ],
	class => qq(zone),
	descr => qq(Join a zone group.),
    },

    leave => {
	handler => sub {
	    my $fh = shift;

	    each_zone($selectors{$fh}, sub {
		shift->avtLeave();
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	class => qq(zone),
	descr => qq(Leave the current zone group.),
    },

    play_uri => {
	handler => sub {
	    my $fh = shift;
	    my $uri = shift;
	    my $meta = shift;

	    $uri =~ s@^http:@x-rincon-mp3radio:@i;
	    each_group($selectors{$fh}, sub {
		my $group = shift;

		$group->avtURI($uri, $meta);
		$group->avtPlay;
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	args => [ qr/.{3,}/, qr// ],
	class => qq(group),
	descr => qq(Playback an URI.),
    },

    next_uri => {
	handler => sub {
	    my $fh = shift;
	    my $uri = shift;
	    my $meta = shift;

	    $uri =~ s@^http:@x-rincon-mp3radio:@i;
	    each_group($selectors{$fh}, sub {
		my $group = shift;

		$group->avtNextURI($uri, $meta);
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	args => [ qr/.{3,}/, qr// ],
	class => qq(group),
	descr => qq(Set next playback URI.),
    },

    say => {
	handler => sub {
	    my $fh = shift;

	    my $digest = $sonos->speak->say(@_);
	    each_group($selectors{$fh}, sub {
		my $group = shift;
		my $zpid = $group->getShortID();

		my $uri = 'x-rincon-mp3radio://'.$group->getLocalIP.':'.$sonos->httpd->port."/speak/$digest";

		my $ret = $group->avtGetPositionInfo;
		$posinfo{$zpid} = $ret->getargumentlist;
		my $oldstatus = $group->getStatus;

		my $count;
		$group->regUpdateStatus(sub {
		    my $status = shift;

		    if($status->{TransportState}->{val} eq 'PLAYING') {
			if($count) {
			    $group->avtStop;
			    $group->avtURI($posinfo{$zpid}->{TrackURI});
			    $group->avtPlay if($oldstatus->{TransportState}->{val} eq 'PLAYING');

			    return 0;
			}

			$count++;
		    }

		    return 1;

					});

		$group->avtURI($uri);
		$group->avtPlay;
	    });

	    print $fh retval(HTTP_OK, 'OK');
	},
	args => [ qr/.+/, undef ],
	class => qq(group),
	descr => qq(Playback an URI.),
    },


    ## Misc ##
    help => {
	handler => sub {
	    my $fh = shift;

	    my $c = 0;
	    my $msg = "Global Commands:\n";
	    foreach my $cmd (sort { unless($a =~ /^[gz]/ && $b =~ /^[gz]/) { return 1 if($a =~ /^[gz]/); return -1 if($b =~ /^[gz]/); } $a cmp $b; } keys %ctrl_cmds) {
		if(($c == 0 && $cmd =~ /^g/) ||
		   ($c == 1 && $cmd =~ /^z/)) {

		    $msg .= "\n";
		    $c++;

		    $msg .= "Group Commands:\n" if($c == 1);
		    $msg .= "Zone Commands:\n" if($c == 2);
		}
		$msg .= sprintf " %-12s\t%s\n", $cmd.join(' ', ), $ctrl_cmds{$cmd}->{descr};
	    }

	    print $fh retval(HTTP_OK, qq(OK), $msg);
	},
	descr => qq(Show command list.),
    },
    exit => {
	handler => sub {
	    my $fh = shift;
	    delete($selectors{$fh});

	    print $fh retval(HTTP_OK, qq(OK));

	    $ctrl_ctxs{$fh}->{w} = undef;
	    delete($ctrl_ctxs{$fh});

	    $main::logger->info("CTRL[".$fh->fileno."] exiting");

	    close($fh);
	},
	descr => qq(Terminate current connection.),
    },
    );
my %ctrl_cmap;
foreach my $cmd (keys %ctrl_cmds) {
    $ctrl_cmap{lc($cmd)} = $cmd;
}

my $tctrl_sock = tcp_server sonos_config_get(qq(sonos-backend/CtrlListenAddr)), sonos_config_get(qq(sonos-backend/CtrlListenPort)), sub {
    my ($fh, $host, $port) = @_;

    $main::logger->info("CTRL[".$fh->fileno."] incoming connection from $host:$port...");
    print $fh retval(HTTP_OK, qq(READY));
    $fh->flush;

    $ctrl_ctxs{$fh}->{select} = '*';
    $ctrl_ctxs{$fh}->{w} = AnyEvent->io(fh => $fh, poll => 'r', cb => sub {
	if(eof($fh)) {
	    $ctrl_ctxs{$fh}->{w} = undef;
	    delete($ctrl_ctxs{$fh});

	    $main::logger->info("CTRL[".$fh->fileno."] EOF");

	    return;
	}

	my $line = <$fh>;
	chomp($line);
	my ($cmd, @args) = split(/\s+/, $line);
	return unless(defined($cmd));
	if(exists($ctrl_cmap{lc($cmd)})) {
	    my $cref = $ctrl_cmds{$ctrl_cmap{lc($cmd)}};

	    my $e = 0;
	    if(exists($cref->{args})) {
		my $c = $#{ $cref->{args} };
		my $v = (defined(($cref->{args}->[$c])) ? 0 : 1);

		if($#args < $c - $v || (!$v && $#args > $c - $v)) {
		    print $fh retval(HTTP_BAD_REQUEST, 'Invalid argument count!', undef)."\n";
		    $e++;
		}
		else {
		    foreach my $i (0 .. $#args) {
			last unless(defined($args[$i]));

			unless($args[$i] =~ /$cref->{args}->[$i]/i) {
			    print $fh retval(HTTP_BAD_REQUEST, 'Argument #'.($i+1)." has invalid format (expected m/$cref->{args}->[$i]/i)!", undef)."\n";
			    $e++;
			    last;
			}
		    }
		}

	    }
	    elsif($#args != -1) {
		print $fh retval(HTTP_BAD_REQUEST, 'Invalid arguments!');
		$e++;
	    }

	    $cref->{handler}($fh, @args) unless($e);
	}
	else {
	    $main::logger->notice("CTRL[".$fh->fileno."] invalid command: $line");
	    print $fh retval(HTTP_NOT_IMPLEMENTED, qq(unknown command));
	}
	$fh->flush;
				    });
};


$main::logger->info("enter event loop...");
AnyEvent->condvar->recv;
